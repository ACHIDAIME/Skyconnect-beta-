# SkyConnect - Instructions d’installation et de lancement

## Prérequis

- Python 3.10+ installé
- PostgreSQL installé et configuré
- Un compte GitHub (pour cloner le projet)
- Accès à Internet (pour installer les dépendances)

## Installation

1. **Cloner le projet**
   ```sh
   git clone https://github.com/ACHIDAIME/skyconnect-beta-.git
   cd skyconnect-beta-
   ```

2. **Créer et activer un environnement virtuel**
   ```sh
   python -m venv .venv
   .venv\Scripts\activate   # Sur Windows
   # ou
   source .venv/bin/activate   # Sur Mac/Linux
   ```

3. **Installer les dépendances**
   ```sh
   python -m pip install -r requirements.txt
   ```

4. **Créer la base de données PostgreSQL**
   - Crée une base nommée `skyconnect_db` (ou adapte le nom dans `settings.py`)
   - Crée un utilisateur PostgreSQL et donne-lui les droits sur la base

5. **Configurer la connexion à la base dans `settings.py`**
   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'NAME': 'skyconnect_db',
           'USER': 'ton_utilisateur',
           'PASSWORD': 'ton_mot_de_passe',
           'HOST': 'localhost',
           'PORT': '5432',
       }
   }
   ```

6. **Configurer les fichiers médias**
   Dans `settings.py` :
   ```python
   MEDIA_URL = '/media/'
   MEDIA_ROOT = BASE_DIR / 'media'
   ```
   Dans `urls.py` principal :
   ```python
   from django.conf import settings
   from django.conf.urls.static import static

   urlpatterns = [
       # ... tes urls ...
   ]

   if settings.DEBUG:
       urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
   ```

7. **Appliquer les migrations**
   ```sh
   python manage.py makemigrations
   python manage.py migrate
   ```

8. **Créer un superutilisateur pour l’admin Django**
   ```sh
   python manage.py createsuperuser
   ```

9. **Lancer le serveur**
   ```sh
   python manage.py runserver
   ```

10. **Accéder au site**
    - Frontend : [http://127.0.0.1:8000/](http://127.0.0.1:8000/)
    - Admin : [http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)

## Utilisation

- Ajoute sliders, actualités (avec plusieurs images via l’admin), services, logo, zones de couverture, etc. via l’admin Django.
- Les images uploadées sont stockées dans le dossier `media/`.
- Les fichiers supprimés dans l’admin sont aussi supprimés physiquement si tu utilises le package `django-cleanup`.
- Pour les icônes Bootstrap, utilise les noms disponibles ici :  
  [https://icons.getbootstrap.com](https://icons.getbootstrap.com)

## Fonctionnalités

- Gestion dynamique des actualités avec plusieurs images par actualité.
- Zones de couverture : une zone peut regrouper plusieurs communes.
- Design responsive et personnalisable.
- Nettoyage automatique des fichiers médias orphelins (avec `django-cleanup`).

## Conseils

- Pour ajouter plusieurs images à une actualité, utilise le formulaire inline dans l’admin.
- Si tu modifies les modèles, pense à refaire les migrations.
- Pour la production, configure un serveur WSGI/ASGI et un stockage sécurisé pour les